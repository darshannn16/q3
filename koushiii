

---

#Backend
1.Product Controller
const Product = require('../models/productModel');


exports.createProduct = async (req, res) => {
  try {
    const { productName, price, category } = req.body;

 
    if (!productName || !price || !category) {
      return res.status(400).json({
        message: 'All fields (productName, price, category) are required'
      });
    }

 
    if (price <= 0) {
      return res.status(400).json({
        message: 'Price must be a positive number'
      });
    }

 
    const newProduct = await Product.create({ productName, price, category });

    return res.status(201).json({
      message: 'Product created successfully',
      product: newProduct
    });
  } catch (error) {
    console.error('Error creating product:', error);
    return res.status(500).json({
      message: 'Internal Server Error',
      error: error.message
    });
  }
};


exports.getProducts = async (req, res) => {
  try {
    const products = await Product.find().sort({ createdAt: -1 });

    return res.status(200).json({
      message: 'Products retrieved successfully',
      products,
      count: products.length
    });
  } catch (error) {
    console.error('Error fetching products:', error);
    return res.status(500).json({
      message: 'Internal Server Error',
      error: error.message
    });
  }
};

2.Product Models
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema(
  {
    productName: {
      type: String,
      required: [true, 'Product name is required'],
      trim: true
    },
    price: {
      type: Number,
      required: [true, 'Product price is required'],
      min: [0, 'Price must be a positive number']
    },
    category: {
      type: String,
      required: [true, 'Product category is required'],
      trim: true
    }
  },
  {
    timestamps: true 
  }
);

const Product = mongoose.model('Product', productSchema);

module.exports = Product;


3.Product Router



const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');
router.post('/create', productController.createProduct);
router.get('/', productController.getProducts);

module.exports = router;


4.Index


const express = require('express');
const mongoose = require('mongoose');
const productRoutes = require('./routes/productRoutes');
const app = express();
require('dotenv').config();

app.use(express.json()); 

const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/productmart';

mongoose
  .connect(MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  })
  .then(() => console.log('✅ MongoDB connected successfully'))
  .catch((err) => console.error('❌ MongoDB connection error:', err));

app.use('/api/products', productRoutes);

app.get('/', (req, res) => {
  res.send('Welcome to ProductMart Backend API 🚀');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`✅ Server running on http://localhost:${PORT}`);
});



##Front-End

1.AppProduct.jsx


import React, { useState } from 'react';
import axios from 'axios';

const AddProduct = () => {
  const [productName, setProductName] = useState('');
  const [price, setPrice] = useState('');
  const [category, setCategory] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!productName || !price || !category) {
      setMessage('All fields are required');
      return;
    }

    try {
      const response = await axios.post('http://localhost:5000/api/products', {
        productName,
        price,
        category,
      });

      if (response.status === 201) {
        setMessage('Product created successfully');
        setProductName('');
        setPrice('');
        setCategory('');
      }
    } catch (error) {
      setMessage('Error adding product');
    }
  };

  return (
    <div style={{ textAlign: 'center', marginTop: '50px' }}>
      <h2>Add New Product</h2>

      <form onSubmit={handleSubmit} style={{ marginTop: '20px' }}>
        <div>
          <label htmlFor="productName">Product Name: </label>
          <input
            id="productName"
            type="text"
            value={productName}
            onChange={(e) => setProductName(e.target.value)}
            aria-label="Product Name"
          />
        </div>

        <div style={{ marginTop: '10px' }}>
          <label htmlFor="price">Price: </label>
          <input
            id="price"
            type="number"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
            aria-label="Price"
          />
        </div>

        <div style={{ marginTop: '10px' }}>
          <label htmlFor="category">Category: </label>
          <input
            id="category"
            type="text"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            aria-label="Category"
          />
        </div>

        <div style={{ marginTop: '20px' }}>
          <button type="submit">Add Product</button>
        </div>
      </form>

      {message && <p style={{ color: 'red', marginTop: '15px' }}>{message}</p>}
    </div>
  );
};

export default AddProduct;



2.Home.jsx



import React from 'react';
import { useNavigate } from 'react-router-dom';

const Home = () => {
  const navigate = useNavigate();

  return (
    <div style={{ textAlign: 'center', marginTop: '60px' }}>
      <h1>ProductMart Display System</h1>
      <div style={{ marginTop: '40px' }}>
        <button onClick={() => navigate('/add')} style={{ marginRight: '20px', padding: '10px 20px' }}>
          Add Product
        </button>
        <button onClick={() => navigate('/view')} style={{ padding: '10px 20px' }}>
          View Products
        </button>
      </div>
    </div>
  );
};

export default Home;



3.ViewProduct.jsx


import React, { useEffect, useState } from 'react';
import axios from 'axios';

const ViewProduct = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/products');
        setProducts(res.data.products);
        setLoading(false);
      } catch (err) {
        setError('Unable to fetch products');
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  if (loading) {
    return <p style={{ textAlign: 'center' }}>Loading products...</p>;
  }

  if (error) {
    return <p style={{ textAlign: 'center', color: 'red' }}>[Error - You need to specify the message]</p>;
  }

  return (
    <div style={{ textAlign: 'center', marginTop: '40px' }}>
      <h2>All Products</h2>

      {products.length === 0 ? (
        <p>No Products Found</p>
      ) : (
        <table border="1" style={{ margin: '20px auto', width: '80%' }}>
          <thead>
            <tr>
              <th>Product Name</th>
              <th>Price</th>
              <th>Category</th>
              <th>Created At</th>
            </tr>
          </thead>
          <tbody>
            {products.map((p) => (
              <tr key={p._id}>
                <td>{p.productName}</td>
                <td>{p.price}</td>
                <td>{p.category}</td>
                <td>{new Date(p.createdAt).toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default ViewProduct;



4.App.js


import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Home from './Components/Home';
import AddProduct from './Components/AddProduct';
import ViewProduct from './Components/ViewProduct';

const App = () => {
  return (
    <div>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/add" element={<AddProduct />} />
        <Route path="/view" element={<ViewProduct />} />
      </Routes>
    </div>
  );
};

export default App;






5.index.js


import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);







